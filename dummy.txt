import React, { useState, useEffect } from 'react';
import FileList from '../FileListComponent/FileListComponent'; 
import SearchBar from '../SearchBarComponent/SearchBarComponent'; 
import FileUploadComponent from '../FileUploadComponent/FileUploadComponent';
import { EllipsisVertical } from 'lucide-react';
import axiosInstance from '../../axiosInstance';
import BasicAlerts from '../BasicAlerts/BasicAlerts'; // import the floating alert component

const MyFilesComponent = () => {
  const [fileData, setFileData] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [showOptions, setShowOptions] = useState(null);
  const [alertData, setAlertData] = useState({ visible: false, message: '', severity: 'success' });

  const fetchFiles = async () => {
    try {
      const response = await axiosInstance.get('/files');
      setFileData(response.data.data);
    } catch (error) {
      console.error('Error fetching files:', error);
      setAlertData({ visible: true, message: 'Failed to load files', severity: 'error' });
    }
  };

  useEffect(() => {
    fetchFiles();
  }, []);

  const handleUploadSuccess = () => {
    fetchFiles();
    setAlertData({ visible: true, message: 'File uploaded successfully', severity: 'success' });
  };

  const handleDeleteFile = async (fileId) => {
    try {
      await axiosInstance.delete(`/files/${fileId}`);
      setFileData(fileData.filter(file => file._id !== fileId)); 
      setAlertData({ visible: true, message: 'File deleted successfully', severity: 'success' });
    } catch (error) {
      console.error('Error deleting file:', error);
      setAlertData({ visible: true, message: 'Failed to delete file', severity: 'error' });
    }
  };

  const handleToggleOptions = (fileId) => {
    setShowOptions(prev => (prev === fileId ? null : fileId));
  };

  return (
    <div className='bg-white h-screen flex'>
      <div className='px-8 py-16 w-full'>
        <BasicAlerts
          message={alertData.message}
          severity={alertData.severity}
          visible={alertData.visible}
        />

        <SearchBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
        
        {/* Recently Added Files */}
        <p className='mt-20 mb-10 text-2xl font-semibold'>Recently Added Files</p>
        <div className='flex flex-wrap gap-9'>
          {fileData.slice(0, 4).map(file => (
            <div className='bg-paleBlue w-64 py-3 px-5 rounded-xl relative' key={file._id}>
              <div className='flex items-center leading-none text-black'>
                <p className='text-sm pl-3 truncate max-w-[150px]'>{file.fileName}</p>
                <EllipsisVertical onClick={() => handleToggleOptions(file._id)} className='cursor-pointer' />
              </div>
              {/* Additional file details */}
              {showOptions === file._id && (
                <div className="absolute z-50 bg-white rounded-md shadow-lg border" style={{ top: '40px', right: '10px' }}>
                  <button onClick={() => handleDeleteFile(file._id)} className="block w-full text-left px-4 py-2 text-sm text-red-700 hover:bg-gray-100 rounded">Delete</button>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Upload Component */}
        <FileUploadComponent currentFolderId={null} onUploadSuccess={handleUploadSuccess} />

        {/* All Files */}
        <p className='mt-20 mb-10 text-2xl font-semibold'>My files</p>
        <FileList files={fileData} searchQuery={searchQuery} onDeleteFile={handleDeleteFile} />
      </div>
    </div>
  );
};

export default MyFilesComponent;
